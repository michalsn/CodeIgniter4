name: Tests Framework

on:
  push:
    branches: 
      - action-test-sqlsrv
  pull_request:
    branches:
      - develop

jobs:

  tests:
    runs-on: ubuntu-latest
    name: PHP ${{ matrix.php-versions }} - ${{ matrix.db-platforms }}

    if: "!contains(toJSON(github.event.commits.*.message), '[ci skip]')"

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd=pg_isready --health-interval=10s --health-timeout=5s --health-retries=3

      mssql:
        image: microsoft/mssql-server-linux:2017-latest
        env:
          SA_PASSWORD: 1Secure*Password1
          ACCEPT_EULA: Y
          MSSQL_PID: Developer
        ports:
          - 1433:1433

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: false
      matrix:
        php-versions: ['7.4']
        db-platforms: ['sqlsrv', 'mysqli', 'postgres', 'sqlite']

    steps:
      - name: Create database for MSSQL Server
        if: ${{ matrix.db-platforms == 'sqlsrv'}}
        run: sqlcmd -S localhost -U sa -P 1Secure*Password1 -Q "CREATE DATABASE test"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: composer, pecl
          extensions: imagick, sqlsrv
          coverage: pcov

      - name: Install Memcached
        uses: niden/actions-memcached@v7

      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: |
          composer install --no-progress --no-suggest --no-interaction --prefer-dist --optimize-autoloader
          composer remove --dev phpstan/phpstan
          composer remove --dev rector/rector
          composer remove --dev codeigniter4/codeigniter4-standard
          composer remove --dev squizlabs/php_codesniffer
          php -r 'file_put_contents("vendor/laminas/laminas-zendframework-bridge/src/autoload.php", "");'
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}

      #- name: Whitelist filtering for XDebug
      #  run: php vendor/bin/phpunit --dump-xdebug-filter build/xdebug-filter.php

      - name: Test with PHPUnit
        #run: vendor/bin/phpunit -v --coverage-text --testsuite db
        run: script -e -c "vendor/bin/phpunit -v --coverage-text"
        env:
          DB: ${{ matrix.db-platforms }}
          TERM: xterm-256color

      #- if: success()
      #  run: php tests/bin/php-coveralls.phar -v

